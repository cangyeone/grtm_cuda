#include "../mathematics.h"
#include <string.h>
#include <stdlib.h>
cplx *cge;

static inline void line_add_4(cplx a[4],cplx b[4], cplx cst)
        {
            int i;
            for(i=0;i<4;i++)
            {
                a[i]=a[i]+b[i]*cst;
            }

        }
static inline void line_devide_4(cplx a[4], cplx b)
        {
            b = 1.0/b; 
            a[0] = a[0] * b; 
            a[1] = a[1] * b; 
            a[2] = a[2] * b; 
            a[3] = a[3] * b; 
        }
static void line_change_4(cplx a[4],cplx b[4])
{
    cplx c[4]; 
    memcpy(c, b, 4);
    memcpy(b, a, 4);
    memcpy(a, c, 4);
}


int cplx_minv_4(cplx a[4][4], cplx c[4][4]){
    cplx diag, line_head; 
    cplx a2[4][4]; 
    int i,j,k;
    
    for(i=0;i<4;i++){
        for(j=0;j<4;j++){
            a2[i][j] = a[i][j]; 
            c[i][j] = 0.; 
        }
        c[i][i] = 1.0; 
    }


    for(i=0;i<4;i++)
    {
        diag=a2[i][i];
        k=0;
        while(abs(diag)<EPSILON)
        {
            k++;
            if((i+k)<(4))
            {
                line_change_4(a2[i], a2[i+k]);
                line_change_4(c[i], c[i+k]);
            }
            else
            {
                return 0;
            }
            diag=a2[i][i];
        }
        line_devide_4(a2[i], diag);
        line_devide_4(c[i], diag);
        for(j=i+1;j<4;j++)
        {
            line_head = -a2[j][i];
            line_add_4(a2[j], a2[i], line_head);
            line_add_4(c[j], c[i], line_head);
        }
    }
    for(i=4-1;i>0;i--)
    {
        for(j=0;j<i;j++)
        {
            line_head=-a2[j][i];
            line_add_4(a2[j], a2[i], line_head);
            line_add_4(c[j], c[i], line_head);
        }
    }
    return 1;    
}

int cplx_minvc_4(cplx a[4][4]){
    int i, j, k; 
    float32 d; 
    cplx t; 
    int l[4], m[4]; 
    for(k=0;k<4;k++){
        d = 0.0; 
        for(i=k;i<4;i++){
            for(j=k;j<4;j++){
                if(abs(a[i][j])>d){
                    d = abs(a[i][j]); 
                    l[k] = i; m[k] = j; 
                }
            }
        }
        if(d<EPSILON){
            printf("Singular Mat4\n"); 
            return 0; 
        }
        if(l[k]!=k){
            for(j=0;j<4;j++){
                t = a[k][j]; 
                a[k][j] = a[l[k]][j]; 
                a[l[k]][j] = t; 
            }
        }
        if(m[k]!=k){
            for(i=0;i<4;i++){
                t = a[i][k]; 
                a[i][k] = a[i][m[k]]; 
                a[i][m[k]] = t; 
            }
        }
        a[k][k] = 1.0/a[k][k];
        for(i=0;i<4;i++){
            if(i!=k){
                a[i][k] = -a[k][k] * a[i][k]; 
            }
        }
        for(i=0;i<4;i++){
            for(j=0;j<4;j++){
                if((i!=k)&&(j!=k)){
                    a[i][j] = a[i][j] + a[i][k] * a[k][j]; 
                }
            }
        }
        for(j=0;j<4;j++){
            if(j!=k){
                a[k][j] = a[k][j] * a[k][k]; 
            }
        }
    }

    for(k=3;k>=0;k--){
        for(j=0;j<4;j++){
            t = a[k][j]; 
            a[k][j] = a[m[k]][j]; 
            a[m[k]][j] = t; 
        }
        for(i=0;i<4;i++){
            t = a[i][k]; 
            a[i][k] = a[i][l[k]]; 
            a[i][l[k]] = t; 
        }
    }
    return 1;  
}

int cplx_minvc_2(cplx a[2][2]){
    cplx d, b[2][2]; 
    b[0][0] = a[0][0];
    b[0][1] = a[0][1];
    b[1][0] = a[1][0];
    b[1][1] = a[1][1];

    d = a[0][0] * a[1][1] - a[0][1] * a[1][0]; 
    if(abs(d)<EPSILON){
        //printf("Singular Mat2\n"); 
        return 0; 
    }
    a[0][0] = b[1][1]/d; 
    a[1][1] = b[0][0]/d; 
    a[0][1] = -b[0][1]/d; 
    a[1][0] = -b[1][0]/d; 
    return 1; 
}
